@model ListModel
@inject Core.Services.IDataService _db
@{
    ViewData["bodyClass"] = "home";
    var pgr = Model.Pager;

    var first3 = _db.BlogPosts.All().OrderByDescending(p => p.Published).Take(3).ToList();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <partial name="~/Views/Themes/moments/_Shared/_Head.cshtml" />
</head>
<body class="@ViewData["bodyClass"]">

    <partial name="~/Views/Themes/moments/_Shared/_Header.cshtml" />

    @if (Model.PostListType == PostListType.Search)
    {
        <div class="page-cover" style="background-image: url('@Model.Blog.Cover')">
            <a href="#"><i class="fa fa-search"></i> @Model.Blog.Title</a>
        </div>
    }
    else if (Model.PostListType == PostListType.Author)
    {
        <div class="page-cover" style="background-image: url('@Model.Blog.Cover')">
            <a href="~/">
                <img src="~/@Model.Author.Avatar" class="rounded-circle" style="width: 52px" />
                @Model.Author.DisplayName
            </a>
        </div>
    }
    else if (Model.PostListType == PostListType.Category)
    {
        <div class="page-cover" style="background-image: url('@Model.Blog.Cover')">
            <a href="#"><i class="fa fa-tag"></i> @ViewBag.Category</a>
        </div>
    }
    else
    {
        <div class="blog-featured">
            <div class="container">
                <div class="blog-featured-container">
                    <div id="postCarousel" class="carousel slide " data-ride="carousel">
                        <ol class="carousel-indicators">
                            @for (int i = 0; i < first3.Count(); i++)
                            {
                                var cls = i == 0 ? "active" : "";
                                <li data-target="#postCarousel" data-slide-to="@i" class="@cls">
                                    <img class="blog-featured-item-img d-block w-100" src="~/@first3[i].Cover" alt="@first3[i].Title">
                                </li>
                            }
                        </ol>
                        <div class="carousel-inner">
                            @for (int i = 0; i < first3.Count(); i++)
                            {
                                var cls2 = i == 0 ? "active" : "";
                                <div class="carousel-item @cls2">
                                    <img class="blog-featured-item-img d-block w-100" src="~/@first3[i].Cover" alt="@first3[i].Title">
                                    <div class="blog-featured-item-inner">
                                        @if (!string.IsNullOrEmpty(first3[i].Categories))
                                        {
                                            <span class="blog-featured-item-cat"><i class="fa fa-tag"></i> @first3[i].Categories</span>
                                        }
                                        <h2 class="blog-featured-item-title">@first3[i].Title</h2>
                                        <time class="blog-featured-item-time"><i class="fa fa-clock-o"></i> @first3[i].Published.ToFriendlyDateString()</time>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="page-content">
        <div class="container">
            <div class="row">

                <div class="col-sm-8">
                    @if (Model.Posts != null)
                    {
                        foreach (var item in Model.Posts)
                        {
                            var img = string.IsNullOrEmpty(item.Cover) ? Model.Blog.Cover : item.Cover;
                            <article class="post">
                                <div class="post-cover">
                                    <img src="~/@img" alt="@item.Title">
                                    @if (item.Featured)
                                    {
                                        <span class="post-featrued-label"><i class="fa fa-star"></i> Featured</span>
                                    }
                                </div>
                                <h2 class="post-title"><a href="~/posts/@item.Slug">@item.Title</a></h2>
                                <div class="post-meta">
                                    <a class="post-meta-author" href="~/authors/@item.Author.AppUserName">@item.Author.DisplayName</a>
                                    <time class="post-meta-time">/ @item.Published.ToFriendlyDateString()</time>
                                </div>
                                <div class="post-description">@Html.Raw(Markdig.Markdown.ToHtml(item.Description))</div>
                                <a class="post-more btn btn-rounded btn-dark" href="~/posts/@item.Slug">Read</a>
                            </article>
                        }
                    }
                    @if (pgr != null && (pgr.ShowOlder || pgr.ShowNewer))
                    {
                        <ul class="pagination justify-content-center">
                            @if (pgr.ShowOlder)
                            {
                                <li class="item item-prev">
                                    <a class="item-link" href="~/@pgr.LinkToOlder">
                                        <i class="item-icon fa fa-angle-left"></i>
                                    </a>
                                </li>
                            }
                            @if (pgr.ShowNewer)
                            {
                                <li class="item item-next">
                                    <a class="item-link" href="~/@pgr.LinkToNewer">
                                        <i class="item-icon fa fa-angle-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </div>

                <aside class="col-sm-4">

                    <div class="widget widget-social">
                        <h4 class="widget-title"><span>Follow Us</span></h4>
                        <div class="widget-body">
                            <ul>
                                @await Component.InvokeAsync("HtmlBlock", new { theme = "moments", widget = "Social Buttons" })
                            </ul>
                        </div>
                    </div>

                    <div class="widget widget-posts">
                        <h4 class="widget-title"><span>Recent Posts</span></h4>
                        <div class="widget-body">
                            <ul class="widget-posts-list">
                                @await Component.InvokeAsync("PostList", new { theme = "moments", widget = "Recent Posts" })
                            </ul>
                        </div>
                    </div>

                    <div class="widget widget-categories">
                        <h4 class="widget-title"><span>Categories</span></h4>
                        <div class="widget-body">
                            <ul>
                                <li><a href="#">catname <span>(25)</span></a></li>
                                <li><a href="#">catname <span>(25)</span></a></li>
                                <li><a href="#">catname <span>(25)</span></a></li>
                            </ul>
                        </div>
                    </div>

                    <div class="widget widget-tags">
                        <h4 class="widget-title"><span>Tags</span></h4>
                        <div class="widget-body">
                            <ul class="clearfix">
                                <li><a href="#">News</a></li>
                                <li><a href="#">Technology</a></li>
                                <li><a href="#">Microsoft</a></li>
                                <li><a href="#">C#</a></li>
                                <li><a href="#">Frameworks</a></li>
                                <li><a href="#">Developers</a></li>
                                <li><a href="#">Windows</a></li>
                                <li><a href="#">Tablet</a></li>
                            </ul>
                        </div>
                    </div>

                </aside>

            </div>
        </div>
    </div>

    <div class="widget-newsletter">
        <div class="container">
            <h3>Newsletter!</h3>
            @await Component.InvokeAsync("Newsletter", new { theme = "moments", widget = "Newsletter" })
        </div>
    </div>
    <partial name="~/Views/Themes/moments/_Shared/_Footer.cshtml" />
</body>
</html>
